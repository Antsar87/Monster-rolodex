{"version":3,"sources":["components/card/Card.jsx","components/card-list/Card-list.jsx","components/search-box/Search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","Cardlist","busqueda","search","filter","toLowerCase","includes","console","log","map","Searchbox","placeholder","handler","type","onChange","App","useState","texto","settexto","setsearch","React","useEffect","obtenerDatos","a","fetch","data","json","users","e","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qUAgBeA,MAbf,SAAcC,GACZ,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BACHC,IAAI,iBAEN,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCYTC,MAnBf,SAAkBR,GAChB,IAAIS,EAAWT,EAAMG,QASrB,OAPIH,EAAMU,SACRD,EAAWT,EAAMG,QAAQQ,QAAO,SAACR,GAAD,OAC9BA,EAAQG,KAAKM,cAAcC,SAASb,EAAMU,OAAOE,kBAEnDE,QAAQC,IAAIN,IAIZ,qBAAKR,UAAU,YAAf,SACGQ,EAASO,KAAI,SAACb,GAAD,OACZ,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,U,MCNZa,MARf,YAA8C,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,QAChC,OACE,mCACE,uBAAOlB,UAAU,SAASmB,KAAK,SAASF,YAAaA,EAAaG,SAAUF,O,MC2BnEG,MA5Bf,WACE,IAEA,EAA0BC,mBAFV,IAEhB,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,qBAA5B,mBAAOb,EAAP,KAAegB,EAAf,KAEAC,IAAMC,WAAU,WACdC,MACC,IAEH,IAAMA,EAAY,uCAAG,8BAAAC,EAAA,sEACAC,MAAM,8CADN,cACbC,EADa,gBAECA,EAAKC,OAFN,OAEbC,EAFa,OAGnBT,EAASS,GAHU,2CAAH,qDASlB,OACE,sBAAKjC,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CAAWiB,YAAY,kBAAkBC,QAN9B,SAACgB,GACdT,EAAUS,EAAEC,OAAOC,UAMjB,cAAC,EAAD,CAAUlC,QAASqB,EAAOd,OAAQA,QChBzB4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b26c27ae.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n        alt=\"NO FUNCIONA.\"\r\n      />\r\n      <h2>{props.monster.name}</h2>\r\n      <p>{props.monster.email}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport './Card-list.css';\r\nimport Card from '../card/Card';\r\n\r\nfunction Cardlist(props) {\r\n  let busqueda = props.monster;\r\n\r\n  if (props.search) {\r\n    busqueda = props.monster.filter((monster) =>\r\n      monster.name.toLowerCase().includes(props.search.toLowerCase())\r\n    );\r\n    console.log(busqueda);\r\n  }\r\n\r\n  return (\r\n    <div className=\"card-list\">\r\n      {busqueda.map((monster) => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cardlist;\r\n","import React from 'react';\r\nimport './search-box.css';\r\n\r\nfunction Searchbox({ placeholder, handler }) {\r\n  return (\r\n    <>\r\n      <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handler} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Searchbox;\r\n","import React, { useState } from 'react';\nimport Cardlist from './components/card-list/Card-list';\nimport Searchbox from './components/search-box/Search-box';\nimport './App.css';\n\nfunction App() {\n  const monster = [];\n\n  const [texto, settexto] = useState(monster);\n  const [search, setsearch] = useState();\n\n  React.useEffect(() => {\n    obtenerDatos();\n  }, []);\n\n  const obtenerDatos = async () => {\n    const data = await fetch('https://jsonplaceholder.typicode.com/users');\n    const users = await data.json();\n    settexto(users);\n  };\n\n  const cambio = (e) => {\n    setsearch(e.target.value);\n  };\n  return (\n    <div className=\"App\">\n      <h1>Monster rolodex</h1>\n      <Searchbox placeholder=\"search monsters\" handler={cambio} />\n      <Cardlist monster={texto} search={search} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}